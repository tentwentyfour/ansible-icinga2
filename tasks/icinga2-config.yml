---
- name: Create config directories to include - if any
  become: yes
  file:
    dest: "{{ i2_conf_dir }}/{{ item }}"
    state: directory
    owner: "{{ i2_user }}"
    group: "{{ i2_group }}"
  with_items: "{{ i2_confd }}"

- name: Manage main Icinga 2 configuration
  become: yes
  template:
    src: icinga2.conf.j2
    dest: "{{ i2_conf_dir }}/icinga2.conf"
    owner: "{{ i2_user }}"
    group: "{{ i2_group }}"
    mode: 0644
  notify: reload icinga2

- name: Check for constants sample file
  become: yes
  stat:
    path: "{{ i2_conf_dir }}/constants.conf-sample"
  register: sample_file

- name: Back-up original Icinga 2 config to sample
  become: yes
  copy:
    remote_src: true
    src: "{{ i2_conf_dir }}/constants.conf"
    dest: "{{ i2_conf_dir }}/constants.conf-sample"
    owner: "{{ i2_user }}"
    group: "{{ i2_group }}"
    mode: 0644
  when: not sample_file.stat.exists

- name: Manage Icinga 2 constants
  become: yes
  template:
    src: constants.conf.j2
    dest: "{{ i2_conf_dir }}/constants.conf"
    owner: "{{ i2_user }}"
    group: "{{ i2_group }}"
    mode: 0644
  notify: reload icinga2

- name: Check for zones.conf sample file
  become: yes
  stat:
    path: "{{ i2_conf_dir }}/zones.conf-sample"
  register: zones_sample_file

- name: Back-up original Icinga 2 zones.conf to sample
  become: yes
  copy:
    remote_src: true
    src: "{{ i2_conf_dir }}/zones.conf"
    dest: "{{ i2_conf_dir }}/zones.conf-sample"
    owner: "{{ i2_user }}"
    group: "{{ i2_group }}"
    mode: 0644
  when: not zones_sample_file.stat.exists

- name: Set-up ZoneName and NodeName Endpoint (zones.conf)
  become: yes
  template:
    src: default_zone_fragment.j2
    dest: "{{ i2_conf_dir }}/zones.conf"
    owner: "{{ i2_user }}"
    group: "{{ i2_group }}"
    mode: 0644
    backup: "{{ i2_keep_backups }}"
  when:
    - i2_master or i2_certificate_signed_by_ca
    - not i2_connection_allowed
  notify: reload icinga2

# "icinga2 node setup" takes care of this for us on first-run, but only on nodes
# (including nodes that will become satellites), not on masters.
# We use the presence of PKI-related files to determine whether
# this is a first run or a follow-up run.
- name: Set-up zones.conf on multi-master peers, satellites and agents
  become: yes
  blockinfile:
    create: yes
    owner: "{{ i2_user }}"
    group: "{{ i2_group }}"
    dest: "{{ i2_conf_dir }}/zones.conf"
    marker: "// {mark} Ansible managed block for peers or parents"
    content: "{{ lookup('template', 'templates/peer_zone_fragment.conf.j2') }}"
  when: i2_master or i2_certificate_signed_by_ca or not i2_connection_allowed

- name: Set-up remote Zones and Endpoints on Masters
  become: yes
  blockinfile:
    create: yes
    owner: "{{ i2_user }}"
    group: "{{ i2_group }}"
    dest: "{{ i2_conf_dir }}/zones.conf"
    marker: "// {mark} Ansible managed block for {{ item }} (satellite)"
    content: "{{ lookup('template', 'templates/zone_fragment.conf.j2') }}"
  loop: "{{ groups[i2_satellite_group] }}"
  when: i2_master
  notify: reload icinga2

- name: Add global-templates zone to zones.conf
  become: yes
  blockinfile:
    create: yes
    owner: "{{ i2_user }}"
    group: "{{ i2_group }}"
    dest: "{{ i2_conf_dir }}/zones.conf"
    marker: "// {mark} Ansible managed block for global-templates"
    block: |
      object Zone "global-templates" {
        global = true
      }
  when: i2_master or i2_certificate_signed_by_ca or not i2_connection_allowed

- name: Set-up remote Zones and Endpoints for Satellites
  become: yes
  blockinfile:
    create: yes
    owner: "{{ i2_user }}"
    group: "{{ i2_group }}"
    dest: "{{ i2_zones_dir }}/{{ hostvars[item].i2_zone }}/endpoints.conf"
    marker: "// {mark} Ansible managed block for {{ item }} (client)"
    content: "{{ lookup('template', 'templates/zone_fragment.conf.j2') }}"
  loop: "{{ groups[i2_agent_group] }}"
  when:
    - i2_config_master
    - hostvars[item].i2_hostname is defined
  notify: reload icinga2
